[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 base: hint_color;
uniform sampler2D grain;
uniform sampler2D vignette;
uniform float grain_strength : hint_range(0.0, 1.0) = 0.3;
uniform float fps : hint_range(12.0, 60.0) = 12.0;
uniform float stretch : hint_range(0.0, 1.0) = 0.5;
uniform float flashing : hint_range(0.0, 1.0) = 0.01;

vec3 make_grain(float time, vec2 uv) {
	vec2 ofs = vec2(sin(41.0 * time * sin(time * 123.0)), sin(27.0 * time * sin(time * 312.0)));
	return texture(grain, (uv + mod(ofs, vec2(1.0, 1.0))) * stretch).rgb;
}

void fragment() {
	vec3 c = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;

	//float v = max(c.r, max(c.g, c.b));
	float v = dot(c, vec3(0.33333, 0.33333, 0.33333));
	v = sqrt(v);
	//v *= v;

	float f = 1.0 / fps;
	vec3 g = make_grain(TIME - mod(TIME, f), UV);
	//g = max(g, make_grain(TIME - mod(TIME, f) + f, UV) * 0.5);
	//g = max(g, make_grain(TIME - mod(TIME, f) + f * 2.0, UV) * 0.25);

	COLOR.rgb = base.rgb * v - g * grain_strength;
	//COLOR.rgb *= texture(vignette, UV).r;
	float ft = TIME * 0.002;
	//COLOR.rgb += vec3(sin(75.0 * ft * sin(ft * 123.0))) * flashing;
}"

[sub_resource type="OpenSimplexNoise" id=2]
seed = 8
period = 0.1

[sub_resource type="NoiseTexture" id=3]
width = 640
height = 360
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/base = Color( 1, 1, 1, 1 )
shader_param/grain_strength = 0.3
shader_param/fps = 12.0
shader_param/stretch = 1.0
shader_param/flashing = 0.0
shader_param/grain = SubResource( 3 )
