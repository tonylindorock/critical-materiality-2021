[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float scan_line_count : hint_range(0,1280) = 128;
uniform float aberration : hint_range(0.0, 4.0) = 0.5;
uniform bool apply = true;
uniform float PI = 3.1415926;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

vec2 uv_curve(vec2 uv){
	uv = (uv-0.5)*2.0;
	uv.x *= 1.0 + pow(abs(uv.y)/4.0,2.0);
	uv.y *= 1.0 + pow(abs(uv.x)/4.0,2.0);
	uv = (uv/2.0) + 0.5;

	return uv;
}

float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment(){
	vec2 uv = uv_curve(SCREEN_UV);
	
	float r = texture(SCREEN_TEXTURE,uv + vec2(SCREEN_PIXEL_SIZE.x * -aberration),0.0).r;
	float g = texture(SCREEN_TEXTURE,uv + vec2(SCREEN_PIXEL_SIZE.x * aberration),0.0).g;
	float b = texture(SCREEN_TEXTURE,uv + vec2(SCREEN_PIXEL_SIZE.x * 0.0),0.0).b;
	
	float s = sin(uv.y * scan_line_count * PI * 2.0);
	s=(s*0.5+0.5)*0.9+0.1;
	vec4 scan_line = vec4(vec3(pow(s,0.25)),1.0);
	
	if (apply){
		vec3 text = vec3(r, g, b) *  vignette(uv);
		COLOR = vec4(text, 1.0) * scan_line;
	}else{
		COLOR = texture(SCREEN_TEXTURE,SCREEN_UV);
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/scan_line_count = 128.0
shader_param/aberration = 0.6
shader_param/apply = true
shader_param/PI = 3.14159
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 1.0
